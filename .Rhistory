polygon(x_vec, y_vec, col = "grey95", border = NA)
text(x = mean(c(win_dim[1], win_dim[2])), y = (win_dim[4] - 0.09/2*(win_dim[4] - win_dim[3])), main)
# Add axes and box
lines(x_vec[1:2], rep((win_dim[4] - 0.09*(win_dim[4] - win_dim[3])),2), col = 1)
box()
axis(1, padj = 0.3)
y_axis = axis(2, labels = FALSE, tick = FALSE)
y_axis = y_axis[y_axis < (win_dim[4] - 0.09*(win_dim[4] - win_dim[3]))]
axis(2, padj = -0.2, at = y_axis)
# Add trajectory
lines(position, type = "l", col = color, pch = 16)
# Start and end points
points(c(0,position[steps+1,1]), c(0,position[steps+1,2]), cex = pt.cex, col = pt_col, pch = pt_pch)
# Legend
leg_pos = c(min(position[,1]), max(position[,2]))
legend(leg_pos[1], leg_pos[2], c("Start","End"),
col = pt_col, pch = pt_pch, pt.cex = pt.cex, bty = "n")
vector_name[x, y, z]
f(x) , x = [0, 0, 0]
#HW2
B <- 10^4
# Control seed
set.seed(1982)
Ut <- runif(B)
head(Ut)
# Number of steps
steps <- 10^5
# Direction probability (i.e. all direction are equally likely)
probs <- c(0.25, 0.5, 0.75)
# Initial matrix
step_direction <- matrix(0, steps+1, 2)
# Start random walk
for (i in seq(2, steps+1)){
# Draw a random number from U(0,1)
rn = runif(1)
# Go right if rn \in [0,prob[1])
if (rn < probs[1]) {step_direction[i,1] = 1}
# Go left if rn \in [probs[1], probs[2])
if (rn >= probs[1] && rn < probs[2]) {step_direction[i,1] = -1}
# Go forward if rn \in [probs[2], probs[3])
if (rn >= probs[2] && rn < probs[3]) {step_direction[i,2] = 1}
# Go backward if rn \in [probs[3],1]
if (rn >= probs[3]) {step_direction[i,2] = -1}
}
# Cumulative steps
position = data.frame(x = cumsum(step_direction[, 1]),
y = cumsum(step_direction[, 2]))
# Let's make a nice graph...
# Graph parameters
color = "blue4"
xlab = "X-position"
ylab = "Y-position"
pt_pch = 16
pt.cex = 2
main = paste("Simulated 3D RW with", steps, "steps", sep = " ")
hues = seq(15, 375, length = 3)
pt_col = hcl(h = hues, l = 65, c = 100)[1:2]
par(mar = c(5.1, 5.1, 1, 2.1))
# Main plot
plot(NA,  xlim = range(position[,1]),
ylim = range(range(position[,2])),
xlab = xlab, ylab = ylab, xaxt = 'n',
yaxt = 'n', bty = "n", ann = FALSE)
win_dim = par("usr")
par(new = TRUE)
plot(NA, xlim = range(position[,1]), ylim = c(win_dim[3], win_dim[4] + 0.09*(win_dim[4] - win_dim[3])),
xlab = xlab, ylab = ylab, xaxt = 'n', yaxt = 'n', bty = "n")
win_dim = par("usr")
# Add grid
grid(NULL, NULL, lty = 1, col = "grey95")
# Add title
x_vec = c(win_dim[1], win_dim[2], win_dim[2], win_dim[1])
y_vec = c(win_dim[4], win_dim[4],
win_dim[4] - 0.09*(win_dim[4] - win_dim[3]),
win_dim[4] - 0.09*(win_dim[4] - win_dim[3]))
polygon(x_vec, y_vec, col = "grey95", border = NA)
text(x = mean(c(win_dim[1], win_dim[2])), y = (win_dim[4] - 0.09/2*(win_dim[4] - win_dim[3])), main)
# Add axes and box
lines(x_vec[1:2], rep((win_dim[4] - 0.09*(win_dim[4] - win_dim[3])),2), col = 1)
box()
axis(1, padj = 0.3)
y_axis = axis(2, labels = FALSE, tick = FALSE)
y_axis = y_axis[y_axis < (win_dim[4] - 0.09*(win_dim[4] - win_dim[3]))]
axis(2, padj = -0.2, at = y_axis)
# Add trajectory
lines(position, type = "l", col = color, pch = 16)
# Start and end points
points(c(0,position[steps+1,1]), c(0,position[steps+1,2]), cex = pt.cex, col = pt_col, pch = pt_pch)
# Legend
leg_pos = c(min(position[,1]), max(position[,2]))
legend(leg_pos[1], leg_pos[2], c("Start","End"),
col = pt_col, pch = pt_pch, pt.cex = pt.cex, bty = "n")
install.packages(animation)
getSymbols("AAPL")
install.packages("plot3D")
B <- 10^4
# Control seed
set.seed(1982)
Ut <- runif(B)
head(Ut)
# generate n numbers
vector <- c(0, 0, 0)
# Direction probability (i.e. all direction are equally likely)
probs <- c(0.25, 0.5, 0.75)
# Initial matrix
step_direction <- matrix(0, vector+1, 2)
# Start random walk
for (i in seq(2, vector+1)){
# Draw a random number from U(0,1)
rn = runif(1)
# Go right if rn \in [0,prob[1])
if (rn < probs[1]) {step_direction[i,1] = 1}
# Go left if rn \in [probs[1], probs[2])
if (rn >= probs[1] && rn < probs[2]) {step_direction[i,1] = -1}
# Go forward if rn \in [probs[2], probs[3])
if (rn >= probs[2] && rn < probs[3]) {step_direction[i,2] = 1}
# Go backward if rn \in [probs[3],1]
if (rn >= probs[3]) {step_direction[i,2] = -1}
}
# Cumulative steps
position = data.frame(x = cumsum(step_direction[, 1]),
y = cumsum(step_direction[, 2]))
# Let's make a nice graph...
# Graph parameters
color = "blue4"
xlab = "X-position"
ylab = "Y-position"
pt_pch = 16
pt.cex = 2
main = paste("Simulated 3D RW with", steps, "steps", sep = " ")
hues = seq(15, 375, length = 3)
pt_col = hcl(h = hues, l = 65, c = 100)[1:2]
par(mar = c(5.1, 5.1, 1, 2.1))
# Main plot
plot(NA,  xlim = range(position[,1]),
ylim = range(range(position[,2])),
xlab = xlab, ylab = ylab, xaxt = 'n',
yaxt = 'n', bty = "n", ann = FALSE)
win_dim = par("usr")
par(new = TRUE)
plot(NA, xlim = range(position[,1]), ylim = c(win_dim[3], win_dim[4] + 0.09*(win_dim[4] - win_dim[3])),
xlab = xlab, ylab = ylab, xaxt = 'n', yaxt = 'n', bty = "n")
win_dim = par("usr")
# Add grid
grid(NULL, NULL, lty = 1, col = "grey95")
# Add title
x_vec = c(win_dim[1], win_dim[2], win_dim[2], win_dim[1])
y_vec = c(win_dim[4], win_dim[4],
win_dim[4] - 0.09*(win_dim[4] - win_dim[3]),
win_dim[4] - 0.09*(win_dim[4] - win_dim[3]))
polygon(x_vec, y_vec, col = "grey95", border = NA)
text(x = mean(c(win_dim[1], win_dim[2])), y = (win_dim[4] - 0.09/2*(win_dim[4] - win_dim[3])), main)
# Add axes and box
lines(x_vec[1:2], rep((win_dim[4] - 0.09*(win_dim[4] - win_dim[3])),2), col = 1)
box()
axis(1, padj = 0.3)
y_axis = axis(2, labels = FALSE, tick = FALSE)
y_axis = y_axis[y_axis < (win_dim[4] - 0.09*(win_dim[4] - win_dim[3]))]
axis(2, padj = -0.2, at = y_axis)
# Add trajectory
lines(position, type = "l", col = color, pch = 16)
# Start and end points
points(c(0,position[steps+1,1]), c(0,position[steps+1,2]), cex = pt.cex, col = pt_col, pch = pt_pch)
# Legend
leg_pos = c(min(position[,1]), max(position[,2]))
legend(leg_pos[1], leg_pos[2], c("Start","End"),
col = pt_col, pch = pt_pch, pt.cex = pt.cex, bty = "n")
```{r}
#HW2
```{r}
B <- 10^4
set.seed(1982)
Ut = runif(B)
head(Ut)
```
```{r}
walk=matrix(rep(NA), nrow = 3, ncol = B)
rownames(walk) = c("x", "y", "z")
x=seq(from = 1, to = B)
colnames(walk) =x
```
```{r}
Xt=c(0, 0 ,0)
for (t in 1:B) {
if (Ut[t] <= 1/6){
Xt=Xt+c(1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>1/6) & (Ut[t] <= 2/6)) {
Xt=Xt+c(-1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>2/6) & (Ut[t] <= 3/6)) {
Xt=Xt+c(0, 1, 0)
walk[,t]=Xt
}else if ((Ut[t]>3/6) & (Ut[t] <= 4/6)) {
Xt=Xt+c(0, -1, 0)
walk[,t]=Xt
}else if ((Ut[t]>4/6) & (Ut[t] <= 5/6)) {
Xt=Xt+c(0, 0, 1)
walk[,t]=Xt
}else if (Ut[t]>5/6) {
Xt=Xt+c(0, 0, -1)
walk[,t]=Xt
}
}
```
```{r}
library(readr)
library(dplyr)
install.packages("readr")
install.packages("dplyr")
```{r}
B <- 10^4
set.seed(1982)
Ut = runif(B)
head(Ut)
Xt=c(0, 0 ,0)
for (t in 1:B) {
if (Ut[t] <= 1/6){
Xt=Xt+c(1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>1/6) & (Ut[t] <= 2/6)) {
Xt=Xt+c(-1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>2/6) & (Ut[t] <= 3/6)) {
Xt=Xt+c(0, 1, 0)
walk[,t]=Xt
}else if ((Ut[t]>3/6) & (Ut[t] <= 4/6)) {
Xt=Xt+c(0, -1, 0)
walk[,t]=Xt
}else if ((Ut[t]>4/6) & (Ut[t] <= 5/6)) {
Xt=Xt+c(0, 0, 1)
walk[,t]=Xt
}else if (Ut[t]>5/6) {
Xt=Xt+c(0, 0, -1)
walk[,t]=Xt
}
}
run(plot3d)
B <- 10^5
set.seed(2000)
Ut = runif(B)
head(Ut)
```{r}
B <- 10^4
set.seed(1982)
Ut = runif(B)
head(Ut)
walk=matrix(rep(NA), nrow = 3, ncol = B)
rownames(walk) = c("x", "y", "z")
x=seq(from = 1, to = B)
colnames(walk) =x
Xt=c(0, 0 ,0)
for (t in 1:B) {
if (Ut[t] <= 1/6){
Xt=Xt+c(1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>1/6) & (Ut[t] <= 2/6)) {
Xt=Xt+c(-1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>2/6) & (Ut[t] <= 3/6)) {
Xt=Xt+c(0, 1, 0)
walk[,t]=Xt
}else if ((Ut[t]>3/6) & (Ut[t] <= 4/6)) {
Xt=Xt+c(0, -1, 0)
walk[,t]=Xt
}else if ((Ut[t]>4/6) & (Ut[t] <= 5/6)) {
Xt=Xt+c(0, 0, 1)
walk[,t]=Xt
}else if (Ut[t]>5/6) {
Xt=Xt+c(0, 0, -1)
walk[,t]=Xt
}
}
B <- 10^5
set.seed(2000)
Ut = runif(B)
head(Ut)
library("Matrix", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("plot3D", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
B <- 10^4
set.seed(1982)
Ut = runif(B)
head(Ut)
walk=matrix(rep(NA), nrow = 3, ncol = B)
rownames(walk) = c("x", "y", "z")
x=seq(from = 1, to = B)
colnames(walk) =x
Xt=c(0, 0 ,0)
for (t in 1:B) {
if (Ut[t] <= 1/6){
Xt=Xt+c(1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>1/6) & (Ut[t] <= 2/6)) {
Xt=Xt+c(-1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>2/6) & (Ut[t] <= 3/6)) {
Xt=Xt+c(0, 1, 0)
walk[,t]=Xt
}else if ((Ut[t]>3/6) & (Ut[t] <= 4/6)) {
Xt=Xt+c(0, -1, 0)
walk[,t]=Xt
}else if ((Ut[t]>4/6) & (Ut[t] <= 5/6)) {
Xt=Xt+c(0, 0, 1)
walk[,t]=Xt
}else if (Ut[t]>5/6) {
Xt=Xt+c(0, 0, -1)
walk[,t]=Xt
}
}
B <- 10^5
set.seed(2000)
Ut = runif(B)
head(Ut)
for (i in seq(2, B+1)){
rn + runif(1)
library("stat297", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
for (i in seq(2, B+1)){
rn + runif(1)
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
walk[,B]
walk[, B]
```{r}
B <- 10^5
set.seed(2000)
Ut = runif(B)
head(Ut)
walk[,B]
walk[B]
install.packages(c("backports", "curl", "mgcv", "Rcpp"))
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("ggmap", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("git2r", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
random_walk <- function(, B)
random_walk <- function(, B)
random_walk <- function(B)
random_walk <- function(B)
help(random_walk)
??random_walk
'??random_walk'
??walk
walkCode(e, w = makeCodeWalker(, B))
walk(e, w = makeCodeWalker(, B))
??walk
walk=matrix(rep(NA), nrow = 3, ncol = B)
rownames(walk) = c("x", "y", "z")
x=seq(from = 1, to = B)
colnames(walk) =x
```{r}
```{rp}
walk=matrix(rep(NA), nrow = 3, ncol = B)
rownames(walk) = c("x", "y", "z")
x=seq(from = 1, to = B)
colnames(walk) =x
```
walk=matrix(rep(NA), nrow = 3, ncol = B)
rownames(walk) = c("x", "y", "z")
x=seq(from = 1, to = B)
colnames(walk) =x
View(step_direction)
View(step_direction)
```{r}
B <- 10^4
set.seed(1982)
Ut = runif(B)
head(Ut)
walk=matrix(rep(NA), nrow = 3, ncol = B)
rownames(walk) = c("x", "y", "z")
x=seq(from = 1, to = B)
colnames(walk) =x
Xt=c(0, 0 ,0)
for (t in 1:B) {
if (Ut[t] <= 1/6){
Xt=Xt+c(1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>1/6) & (Ut[t] <= 2/6)) {
Xt=Xt+c(-1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>2/6) & (Ut[t] <= 3/6)) {
Xt=Xt+c(0, 1, 0)
walk[,t]=Xt
}else if ((Ut[t]>3/6) & (Ut[t] <= 4/6)) {
Xt=Xt+c(0, -1, 0)
walk[,t]=Xt
}else if ((Ut[t]>4/6) & (Ut[t] <= 5/6)) {
Xt=Xt+c(0, 0, 1)
walk[,t]=Xt
}else if (Ut[t]>5/6) {
Xt=Xt+c(0, 0, -1)
walk[,t]=Xt
}
}
B <- 10^5
set.seed(2000)
Ut = runif(B)
head(Ut)
B <- 10^4
set.seed(1982)
Ut = runif(B)
head(Ut)
walk=matrix(rep(NA), nrow = 3, ncol = B)
rownames(walk) = c("x", "y", "z")
x=seq(from = 1, to = B)
colnames(walk) =x
Xt=c(0, 0 ,0)
for (t in 1:B) {
if (Ut[t] <= 1/6){
Xt=Xt+c(1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>1/6) & (Ut[t] <= 2/6)) {
Xt=Xt+c(-1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>2/6) & (Ut[t] <= 3/6)) {
Xt=Xt+c(0, 1, 0)
walk[,t]=Xt
}else if ((Ut[t]>3/6) & (Ut[t] <= 4/6)) {
Xt=Xt+c(0, -1, 0)
walk[,t]=Xt
}else if ((Ut[t]>4/6) & (Ut[t] <= 5/6)) {
Xt=Xt+c(0, 0, 1)
walk[,t]=Xt
}else if (Ut[t]>5/6) {
Xt=Xt+c(0, 0, -1)
walk[,t]=Xt
}
}
B <- 10^5
set.seed(2000)
Ut = runif(B)
head(Ut)
walk[,B]
```{r}
```{r}
```{r}
```{r}
walk[, B]
```
#X_B:
```{r}
walk[, B]
```
install.packages("animation")
walk[, B]
```{r}
walk[, Xt]
walk[,Xt]
#X_Xt:
```{r}
walk[,Xt]
#X_Xt:
```{r}
walk[,Xt]
```
```{r}
position = data.frame(x = cumsum(step_direction[, 1]),
y = cumsum(step_direction[, B]))
color = "blue4"
xlab = "X-position"
ylab = "Y-position"
walk[,Bx]
```{r}
B <- 10^4
set.seed(1982)
Ut = runif(B)
head(Ut)
walk=matrix(rep(NA), nrow = 3, ncol = B)
rownames(walk) = c("x", "y", "z")
x=seq(from = 1, to = B)
colnames(walk) =x
Xt=c(0, 0 ,0)
for (t in 1:B) {
if (Ut[t] <= 1/6){
Xt=Xt+c(1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>1/6) & (Ut[t] <= 2/6)) {
Xt=Xt+c(-1, 0, 0)
walk[,t]=Xt
}else if ((Ut[t]>2/6) & (Ut[t] <= 3/6)) {
Xt=Xt+c(0, 1, 0)
walk[,t]=Xt
}else if ((Ut[t]>3/6) & (Ut[t] <= 4/6)) {
Xt=Xt+c(0, -1, 0)
walk[,t]=Xt
}else if ((Ut[t]>4/6) & (Ut[t] <= 5/6)) {
Xt=Xt+c(0, 0, 1)
walk[,t]=Xt
}else if (Ut[t]>5/6) {
Xt=Xt+c(0, 0, -1)
walk[,t]=Xt
}
}
walk[,B]
B <- 10^5
set.seed(2000)
Ut = runif(B)
head(Ut)
walk[,B]
??par
??par(mfrow)
??mfrow
par(mfrow = c(0, 0, 0))
image3D(Xt, clab = c("height", "m"))
segments3D (x0, y0, z0 x1 = x0, y1 = y0, z1 = z0)
colvar = NULL, phi = 40, theta = 40
??segments3D
segments3D (x0, y0, z0, x1 = x0, y1 = y0, z1 = z0, ...,
colvar = NULL, phi = 40, theta = 40,
col = NULL, NAcol = "white", breaks = NULL,
colkey = NULL, panel.first = NULL,
clim = NULL, clab = NULL, bty = "b",
add = FALSE, plot = TRUE)
install.packages("segments3D")
